# -*- coding: utf-8 -*-
"""ARIMA_JPM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ey7L3GfzVJciOggAhXvLsjcW5xgvt4gr
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.stattools import adfuller

# Upload file in Colab
from google.colab import files
uploaded = files.upload()

# Load the dataset
df = pd.read_csv("stock_data.csv", parse_dates=True, index_col='Date')

# Clean column names
df.columns = df.columns.str.strip()

# Ensure data is sorted by Date
df = df.sort_index()

# Check for stationarity
def adf_test(series):
    result = adfuller(series)
    print(f'ADF Statistic: {result[0]}')
    print(f'p-value: {result[1]}')
    if result[1] < 0.05:
        print("The series is stationary.")
    else:
        print("The series is not stationary.")

# Perform ADF test
adf_test(df['close'])

# If not stationary, difference the series
df['close_diff'] = df['close'].diff().dropna()
adf_test(df['close_diff'].dropna())

# Fit ARIMA model
model = ARIMA(df['close'], order=(5, 1, 5))
model_fit = model.fit()

# Forecast the next 30 business days from 17-12-2024
forecast_steps = 30
forecast = model_fit.forecast(steps=forecast_steps)
forecast_dates = pd.date_range(start='17-12-2024', periods=forecast_steps, freq='B')

# Plot the forecast
plt.figure(figsize=(10, 6))
plt.plot(df.index, df['close'], label='Actual Price')
plt.plot(forecast_dates, forecast, label='Predicted Price', color='red')
plt.title('Stock Price Prediction using ARIMA')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.legend()
plt.xticks(rotation=45)
plt.show()

# Print forecasted prices
print(f"Forecasted Prices for the next {forecast_steps} business days (starting from 17-12-2024):")
for date, price in zip(forecast_dates, forecast):
    print(f"{date.date()}: {price:.2f}")